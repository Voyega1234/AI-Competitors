import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogClose } from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Bookmark, Share2, Loader2, AlertTriangle, BrainCircuit, X } from "lucide-react"
import { cn } from "@/lib/utils"
import { useState, useEffect } from "react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"

// --- Define Defaults for Editable Prompt Sections ---
const DEFAULT_TASK_SECTION = `1.  Conceptualize and Detail **7-10 *truly distinctive and breakthrough*** creative recommendations for {clientName} to dominate attention and gain a significant competitive advantage in the {market} market, specifically bringing {productFocus} to life in novel ways.
2.  **Crucially, these recommendations MUST be highly CREATIVE and ACTIONABLE:** Focus intensely on unique creative directions, specific content narratives, viral-potential ad concepts, and engaging execution formats. Prioritize ideas that are **memorable, shareable, and emotionally resonant**. Push the boundaries of conventional marketing creative.
3.  **Actively use the integrated search grounding capability** to inform your recommendations (trends, competitor examples, platform formats, audience conversations, external inspiration).
4.  For EACH recommendation, provide the **Creative Execution Details** below. **Generate specific, compelling content for each field IN THAI LANGUAGE.**
5.  Populate the corresponding fields in the final JSON object.`;

const DEFAULT_DETAILS_SECTION = `a.  **\`content_pillar\`:** กำหนดธีมเนื้อหาหลักหรือหมวดหมู่ **(ภาษาไทย)** (เช่น \"เคล็ดลับฮาวทู\", \"เบื้องหลังการทำงาน\", \"เรื่องราวความสำเร็จลูกค้า\", \"การหักล้างความเชื่อผิดๆ\", \"ไลฟ์สไตล์และการใช้งาน\", \"ปัญหาและการแก้ไข\").
b.  **\`product_focus\`:** ระบุ {productFocus} หรือฟีเจอร์เฉพาะที่ต้องการเน้น **(ภาษาไทย)**.
c.  **\`concept_idea\`:** สรุปแนวคิดสร้างสรรค์หลัก (1-2 ประโยค) สำหรับการนำเสนอไอเดียนี้ **(ภาษาไทย)**.
d.  **\`copywriting\`:** สร้างสรรค์องค์ประกอบข้อความโฆษณาเบื้องต้น **(ภาษาไทย)**:
    *   **\`headline\`:** พาดหัวที่ดึงดูดความสนใจ **(ภาษาไทย)**.
    *   **\`sub_headline_1\`:** พาดหัวรองที่ขยายความหรือเน้นประโยชน์ **(ภาษาไทย)**.
    *   **\`sub_headline_2\`:** พาดหัวรองที่สอง (ถ้ามี) เพื่อเพิ่มบริบทหรือความเร่งด่วน **(ภาษาไทย)** (ใช้ \`null\` หากไม่ต้องการ).
    *   **\`bullets\`:** รายการจุดเด่น 2-4 ข้อที่เน้นประโยชน์หลัก, ฟีเจอร์ หรือเหตุผลที่น่าเชื่อถือ **(ภาษาไทย)**.
    *   **\`cta\`:** ข้อความเรียกร้องให้ดำเนินการ (Call To Action) ที่ชัดเจน **(ภาษาไทย)** (เช่น \"เรียนรู้เพิ่มเติม\", \"ซื้อเลย\", \"ดูเดโม\", \"เข้าร่วม Waiting List\", \"ดาวน์โหลดคู่มือ\").`;

// --- Define Expected Structures ---

// Nested structure for Topic Ideas
interface TopicIdeasStructure {
  product_benefits_th?: string; // Make optional for safety
  pain_points_emotional_th?: string; // Make optional for safety
  promotion_after_services_th?: string; // Make optional for safety
}

// Define the structure for the copywriting details
interface CopywritingStructure {
  headline?: string; // Make optional for safety
  sub_headline_1?: string; // Make optional for safety
  sub_headline_2?: string | null; // Make optional for safety
  bullets?: string[]; // Make optional for safety
  cta?: string; // Make optional for safety
}

// Updated structure for a recommendation generated by Gemini
interface Recommendation {
  id?: string; // Optional ID if generated/needed later
  title: string;
  description: string;
  category: string;
  impact: string;
  competitiveGap?: string | null;
  tags?: string[] | null;
  // --- REVERTED Strategic Analysis Fields ---
  purpose_th?: string;        // Make optional for safety
  target_audience_th?: string; // Make optional for safety
  context_th?: string;         // Make optional for safety
  constraints_th?: string;     // Make optional for safety
  competitors_th?: string;     // Make optional for safety
  untapped_potential_th?: string; // Make optional for safety
  // --- Marketing Execution Ideas (Keep existing) ---
  promoted_product_th?: string; // Make optional for safety
  mood_and_tone_th?: string;    // Make optional for safety
  key_message_th?: string;      // Make optional for safety
  execution_example_th?: string; // Make optional for safety

  // --- NEW: Creative Execution Details ---
  content_pillar?: string;        // Make optional for safety
  product_focus?: string;       // Make optional for safety
  concept_idea?: string;        // Make optional for safety
  copywriting?: CopywritingStructure; // Nested object for copy details
}

export function RecommendationCards() {

  // --- State for Data and Loading/Error ---
  const [recommendations, setRecommendations] = useState<Recommendation[] | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false); // Combined loading state
  const [error, setError] = useState<string | null>(null);
  // --- State for Dialog ---
  const [selectedRecommendation, setSelectedRecommendation] = useState<Recommendation | null>(null);

  // --- State for Client/Product Selection ---
  const [clientNames, setClientNames] = useState<string[]>([]);
  const [productFocuses, setProductFocuses] = useState<string[]>([]);
  const [selectedClientName, setSelectedClientName] = useState<string | null>(null);
  const [selectedProductFocus, setSelectedProductFocus] = useState<string | null>(null);
  const [selectedRunId, setSelectedRunId] = useState<string | null>(null);
  const [isMetaLoading, setIsMetaLoading] = useState<boolean>(false); // Loading state for client/product lists
  const [metaError, setMetaError] = useState<string | null>(null); // Error state for client/product lists
  const [userBrief, setUserBrief] = useState<string>(""); // State for user brief
  const [editableTaskSection, setEditableTaskSection] = useState<string>(DEFAULT_TASK_SECTION); // NEW: State for editable task
  const [editableDetailsSection, setEditableDetailsSection] = useState<string>(DEFAULT_DETAILS_SECTION); // NEW: State for editable details

  // --- Force re-render check when selectedRecommendation changes --- 
  useEffect(() => {
    // This effect doesn't need to do anything, its purpose is to ensure
    // the component reacts properly when selectedRecommendation is updated.
    if (selectedRecommendation) {
      console.log('Dialog should be showing data for:', selectedRecommendation.title);
    }
  }, [selectedRecommendation]); // Add selectedRecommendation as dependency

  // --- Fetch Client Names on Mount ---
  useEffect(() => {
    const fetchClientNames = async () => {
      setIsMetaLoading(true);
      setMetaError(null);
      try {
        const response = await fetch('/api/clients');
        if (!response.ok) throw new Error('Failed to fetch client names');
        const data = await response.json();
        setClientNames(data.clients || []);
      } catch (err: any) {
        console.error("Error fetching client names for recommendations:", err);
        setMetaError("Could not load client list.");
      } finally {
        setIsMetaLoading(false);
      }
    };
    fetchClientNames();
  }, []);

  // --- Fetch Product Focuses when Client Name changes ---
  useEffect(() => {
    if (!selectedClientName) {
      setProductFocuses([]);
      setSelectedProductFocus(null);
      setSelectedRunId(null); // Clear runId if client changes
      setRecommendations(null); // Clear recommendations
      setError(null);
      return;
    }

    const fetchProductFocuses = async () => {
      setIsMetaLoading(true);
      setMetaError(null);
      setProductFocuses([]); // Clear previous products
      setSelectedProductFocus(null); // Reset selection
      setSelectedRunId(null); // Clear runId
      setRecommendations(null); // Clear recommendations
      setError(null);
      try {
        const response = await fetch(`/api/products?clientName=${encodeURIComponent(selectedClientName)}`);
        if (!response.ok) throw new Error('Failed to fetch product focuses');
        const data = await response.json();
        setProductFocuses(data.products || []);
      } catch (err: any) {
        console.error("Error fetching product focuses for recommendations:", err);
        setMetaError(`Could not load products for ${selectedClientName}.`);
      } finally {
        setIsMetaLoading(false);
      }
    };

    fetchProductFocuses();
  }, [selectedClientName]);

  // --- Fetch Analysis Run ID when Client & Product are selected ---
  // We fetch this *before* generating, to ensure the run exists
  const fetchAnalysisRunId = async () => {
     if (!selectedClientName || !selectedProductFocus) return;
     
     setIsMetaLoading(true);
     setMetaError(null);
     setSelectedRunId(null); // Clear previous
     setRecommendations(null); // Clear recommendations
     setError(null);

     try {
        const productFocusForQuery = selectedProductFocus === 'placeholder-for-empty' ? null : selectedProductFocus;
        const queryParams = new URLSearchParams({ clientName: selectedClientName });
        if (productFocusForQuery !== null) {
            queryParams.set('productFocus', productFocusForQuery);
        }
        const runResponse = await fetch(`/api/analysis-run?${queryParams.toString()}`);
        if (!runResponse.ok) {
            if (runResponse.status === 404) throw new Error(`No analysis run found for ${selectedClientName} - ${productFocusForQuery ?? 'N/A'}. Recommendations cannot be generated.`);
            else throw new Error('Failed to verify analysis run');
        }
        const runData = await runResponse.json();
        if (!runData.id) throw new Error('Analysis run ID missing from response.');
        setSelectedRunId(runData.id);
        console.log("Found runId for recommendations:", runData.id);
     } catch (err: any) {
         console.error("Error fetching analysis run ID:", err);
         setMetaError(err.message);
     } finally {
         setIsMetaLoading(false);
     }
  };

   // Trigger Run ID fetch when product focus is selected
   useEffect(() => {
       if (selectedClientName && selectedProductFocus) {
           fetchAnalysisRunId();
       }
   }, [selectedClientName, selectedProductFocus]);


  // --- Generate Recommendations when Generate Button is Clicked ---
  const handleGenerateRecommendations = async () => {
    if (!selectedRunId) {
      setError("Please select a valid Client and Product combination first.");
      return;
    }

    setIsLoading(true);
    setError(null);
    setRecommendations(null); // Clear previous results
    // Reset selected recommendation when generating new ones
    setSelectedRecommendation(null);

    try {
      console.log(`Fetching recommendations for runId: ${selectedRunId}`);
      let apiUrl = `/api/generate-recommendations?runId=${selectedRunId}`;

      // Send brief OR userPrompt based on mode - REVERT to just sending brief
      if (userBrief.trim()) {
        apiUrl += `&brief=${encodeURIComponent(userBrief.trim())}`;
      }

      // NEW: Append edited sections
      apiUrl += `&taskSection=${encodeURIComponent(editableTaskSection)}`;
      apiUrl += `&detailsSection=${encodeURIComponent(editableDetailsSection)}`;

      const response = await fetch(apiUrl); // Use updated URL
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: `API Error: ${response.status}` })); // Attempt to parse error
        throw new Error(errorData.error || `API Error: ${response.status}`);
      }
      const data = await response.json();
      setRecommendations(data.recommendations || []);
    } catch (err: any) {
      console.error("Failed to fetch recommendations:", err);
      setError(err.message || "An unknown error occurred while generating recommendations.");
    } finally {
      setIsLoading(false);
    }
  };

  // Handler to set the selected recommendation for the dialog
  const handleCardClick = (recommendation: Recommendation) => {
    setSelectedRecommendation(recommendation);
  };

  return (
    <Dialog>
      <div>
        {/* --- Selection UI --- */}
         <div className="flex flex-col gap-4 p-4 border rounded-lg mb-6 bg-muted/40">
           <div className="flex items-end gap-2 flex-wrap">
             {/* Client Selector */}
             <div className="grid gap-1.5">
               <Label htmlFor="rec-client-select" className="text-sm font-medium">Select Client</Label>
               <Select
                 value={selectedClientName ?? ""}
                 onValueChange={(value) => setSelectedClientName(value || null)}
                 disabled={isMetaLoading}
               >
                 <SelectTrigger className="h-9 w-[250px] bg-background" id="rec-client-select">
                   <SelectValue placeholder="Select Client..." />
                 </SelectTrigger>
                 <SelectContent>
                   {clientNames.length > 0 ? (
                     clientNames.map(name => (
                       <SelectItem key={name} value={name}>{name}</SelectItem>
                     ))
                   ) : (
                     <SelectItem value="loading-clients" disabled>Loading clients...</SelectItem>
                   )}
                 </SelectContent>
               </Select>
             </div>

             {/* Product Focus Selector */}
             <div className="grid gap-1.5">
                <Label htmlFor="rec-product-select" className="text-sm font-medium">Select Product</Label>
                <Select
                  value={selectedProductFocus ?? ""}
                  onValueChange={(value) => setSelectedProductFocus(value || null)}
                  disabled={!selectedClientName || isMetaLoading || productFocuses.length === 0}
                >
                  <SelectTrigger className="h-9 w-[250px] bg-background" id="rec-product-select">
                    <SelectValue placeholder={!selectedClientName ? "Select client first" : "Select Product Focus..."} />
                  </SelectTrigger>
                  <SelectContent>
                    {selectedClientName && productFocuses.length > 0 ? (
                      productFocuses.map(focus => (
                        <SelectItem key={focus} value={focus || "placeholder-for-empty"}>{focus || "N/A"}</SelectItem>
                      ))
                    ) : selectedClientName ? (
                      <SelectItem value="loading-products" disabled>Loading products...</SelectItem>
                    ) : null}
                   </SelectContent>
                </Select>
              </div>

             {/* Generate Button */}
             <Button
                onClick={handleGenerateRecommendations}
                disabled={!selectedRunId || isLoading || isMetaLoading} // Disabled if no valid runId or loading
                className="h-9"
             >
                 <BrainCircuit className="mr-2 h-4 w-4" />
                {isLoading ? "Generating..." : "Generate Ideas"}
             </Button>
              
             {/* Meta Loading/Error Display */}
              {isMetaLoading && <Loader2 className="h-5 w-5 animate-spin text-muted-foreground ml-2" />}
              {metaError && !isMetaLoading && <span className="text-xs text-destructive ml-2">{metaError}</span>}
           </div>

           {/* User Brief Input */}
           <div className="grid gap-1.5 w-full">
               <Label htmlFor="rec-user-brief" className={cn(
                   "text-sm font-medium",
               )}>Optional Brief for Gemini</Label>
               <Textarea
                   id="rec-user-brief"
                   placeholder="Provide additional context or specific instructions..."
                   value={userBrief}
                   onChange={(e) => setUserBrief(e.target.value)}
                   className="min-h-[80px] bg-background"
                   disabled={isLoading || isMetaLoading }
               />
           </div>

           {/* NEW: Editable Task Section */}
           <div className="grid gap-1.5 w-full">
               <Label htmlFor="editable-task-section" className="text-sm font-medium">Editable Prompt: Task Section</Label>
               <Textarea
                   id="editable-task-section"
                   placeholder="Define the core task for the AI..."
                   value={editableTaskSection}
                   onChange={(e) => setEditableTaskSection(e.target.value)}
                   className="min-h-[150px] bg-background font-mono text-xs"
                   disabled={isLoading || isMetaLoading}
               />
           </div>

            {/* NEW: Editable Details Section */}
           <div className="grid gap-1.5 w-full">
               <Label htmlFor="editable-details-section" className="text-sm font-medium">Editable Prompt: Creative Execution Details Section</Label>
               <Textarea
                   id="editable-details-section"
                   placeholder="Define the structure and requirements for the creative execution details..."
                   value={editableDetailsSection}
                   onChange={(e) => setEditableDetailsSection(e.target.value)}
                   className="min-h-[150px] bg-background font-mono text-xs"
                   disabled={isLoading || isMetaLoading}
               />
           </div>
         </div>

        {/* --- Display Area --- */}
        {/* Loading State */}
        {isLoading && (
          <div className="flex flex-col items-center justify-center gap-4 p-8 border rounded-lg text-muted-foreground">
            <Loader2 className="h-8 w-8 animate-spin" />
            <span>Generating recommendations...</span>
          </div>
        )}

        {/* Error State */}
        {error && !isLoading && (
           <div className="flex flex-col justify-center items-center p-10 border border-destructive bg-destructive/10 rounded-lg min-h-[200px] text-destructive">
             <AlertTriangle className="h-8 w-8 mb-2" />
             <p className="font-semibold mb-1">Error Generating Recommendations</p>
             <p className="text-sm text-center">{error}</p>
           </div>
         )}

        {/* No Recommendations or Initial State */}
        {!isLoading && !error && (!recommendations || recommendations.length === 0) && (
           <div className="flex flex-col items-center justify-center gap-4 p-8 border rounded-lg text-muted-foreground">
             <AlertTriangle className="h-8 w-8" />
             <span>No recommendations generated. Try adjusting the brief or selection.</span>
           </div>
         )}

        {/* Display Recommendations */}
        {!isLoading && !error && recommendations && recommendations.length > 0 && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {recommendations.map((rec, index) => (
                <DialogTrigger key={`${selectedRunId}-${index}`} asChild>
                  <Card
                    onClick={() => handleCardClick(rec)}
                    className={cn(
                      "cursor-pointer hover:shadow-lg transition-shadow duration-200 flex flex-col h-full",
                      // Add subtle border based on impact (optional)
                      rec.impact === 'High' ? 'border-green-500' :
                      rec.impact === 'Medium' ? 'border-yellow-500' :
                      'border-gray-300' 
                    )}
                  >
                    <CardHeader className="pb-2">
                      <CardTitle className="text-lg leading-tight">{rec.title}</CardTitle>
                      <CardDescription className="pt-1 text-sm">
                        <Badge variant="secondary" className="mr-1">{rec.category}</Badge>
                        <Badge variant={rec.impact === 'High' ? 'default' : rec.impact === 'Medium' ? 'outline' : 'secondary'} className={cn(
                          rec.impact === 'High' ? 'bg-green-600 text-white' : 
                          rec.impact === 'Medium' ? 'border-yellow-600 text-yellow-700' : 
                          ''
                        )}>{rec.impact} Impact</Badge>
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="flex-grow text-sm text-muted-foreground pb-3">
                      <p className="line-clamp-4">{rec.description}</p>
                    </CardContent>
                    <CardFooter className="flex justify-between items-center pt-2 pb-3">
                      <div className="flex flex-wrap gap-1">
                        {(rec.tags || []).map(tag => (
                          <Badge key={tag} variant="outline" className="text-xs">{tag}</Badge>
                        ))}
                      </div>
                    </CardFooter>
                  </Card>
                </DialogTrigger>
              ))}
            </div>
         )}
      </div>

       {/* Dialog Content - Rendered conditionally when a recommendation is selected */}
      {selectedRecommendation && (
        <DialogContent className="max-w-3xl">
          <ScrollArea className="max-h-[80vh] pr-6">
            <DialogHeader>
              <DialogTitle className="text-2xl mb-2">{selectedRecommendation.title}</DialogTitle>
              <DialogDescription className="space-x-2">
                <Badge variant="secondary" className="mr-1">{selectedRecommendation.category}</Badge>
                <Badge variant={selectedRecommendation.impact === 'High' ? 'default' : selectedRecommendation.impact === 'Medium' ? 'outline' : 'secondary'} className={cn(
                  selectedRecommendation.impact === 'High' ? 'bg-green-600 text-white' :
                  selectedRecommendation.impact === 'Medium' ? 'border-yellow-600 text-yellow-700' :
                  ''
                )}>{selectedRecommendation.impact} Impact</Badge>
                {(selectedRecommendation.tags || []).map(tag => (
                  <Badge key={tag} variant="outline" className="text-xs">{tag}</Badge>
                ))}
              </DialogDescription>
            </DialogHeader>

            <div className="py-4 space-y-6">
              <section>
                <h4>รายละเอียด (Description)</h4>
                <p className="text-sm">{selectedRecommendation.description}</p>
                {selectedRecommendation.competitiveGap && (
                  <>
                    <h5 className="mt-3 font-semibold text-sm">ช่องว่างทางการแข่งขัน (Competitive Gap Addressed)</h5>
                    <p className="text-sm">{selectedRecommendation.competitiveGap}</p>
                  </>
                )}
              </section>

              {/* --- Marketing Execution Section (Remains mostly the same structure) --- */}
              {(selectedRecommendation.promoted_product_th || selectedRecommendation.mood_and_tone_th || selectedRecommendation.key_message_th || selectedRecommendation.execution_example_th) && (
                <section className="space-y-2">
                  <h4>แนวทางการสื่อสารการตลาด (Marketing Execution Concepts)</h4>
                  {selectedRecommendation.promoted_product_th && (
                    <div>
                      <h5 className="inline-block font-semibold text-sm mr-2">สินค้า/บริการที่จะเน้น (Promoted Product/Service):</h5>
                      <span className="text-sm">{selectedRecommendation.promoted_product_th}</span>
                    </div>
                  )}
                  {selectedRecommendation.mood_and_tone_th && (
                    <div>
                      <h5 className="inline-block font-semibold text-sm mr-2">อารมณ์และโทน (Mood & Tone):</h5>
                      <span className="text-sm">{selectedRecommendation.mood_and_tone_th}</span>
                    </div>
                  )}
                  {selectedRecommendation.key_message_th && (
                    <div>
                      <h5 className="inline-block font-semibold text-sm mr-2">ข้อความหลัก/สโลแกน (Key Message/Tagline):</h5>
                      <span className="text-sm">{selectedRecommendation.key_message_th}</span>
                    </div>
                  )}
                  {selectedRecommendation.execution_example_th && (
                    <div className="mt-2">
                      <h5 className="font-semibold text-sm mb-1">ตัวอย่างการนำไปใช้ (Execution Example):</h5>
                      <p className="text-sm whitespace-pre-wrap">{selectedRecommendation.execution_example_th}</p>
                    </div>
                  )}
                </section>
              )}

              {/* --- NEW: Creative Execution Details Section --- */}
              {(selectedRecommendation.content_pillar || selectedRecommendation.product_focus || selectedRecommendation.concept_idea || selectedRecommendation.copywriting) && (
                <section className="space-y-3 pt-4 border-t mt-4">
                  <h4 className="font-semibold">Creative Execution Details</h4>
                  {selectedRecommendation.content_pillar && (
                    <div className="text-sm">
                      <h5 className="inline-block font-medium text-sm mr-2 text-muted-foreground">Content Pillar:</h5>
                      <span>{selectedRecommendation.content_pillar}</span>
                    </div>
                  )}
                  {selectedRecommendation.product_focus && (
                    <div className="text-sm">
                      <h5 className="inline-block font-medium text-sm mr-2 text-muted-foreground">Product Focus:</h5>
                      <span>{selectedRecommendation.product_focus}</span>
                    </div>
                  )}
                  {selectedRecommendation.concept_idea && (
                    <div className="text-sm">
                      <h5 className="inline-block font-medium text-sm mr-2 text-muted-foreground">Concept Idea:</h5>
                      <span>{selectedRecommendation.concept_idea}</span>
                    </div>
                  )}

                  {/* Display Copywriting Details */}
                  {selectedRecommendation.copywriting && (
                    <div className="mt-3 space-y-2 border p-3 rounded-md bg-muted/20">
                      <h5 className="font-medium text-sm mb-1">Draft Copywriting:</h5>
                      {selectedRecommendation.copywriting.headline && (
                        <p className="text-sm"><strong>Headline:</strong> {selectedRecommendation.copywriting.headline}</p>
                      )}
                      {selectedRecommendation.copywriting.sub_headline_1 && (
                        <p className="text-sm text-muted-foreground"><strong>Sub-Headline 1:</strong> {selectedRecommendation.copywriting.sub_headline_1}</p>
                      )}
                      {selectedRecommendation.copywriting.sub_headline_2 && (
                        <p className="text-sm text-muted-foreground"><strong>Sub-Headline 2:</strong> {selectedRecommendation.copywriting.sub_headline_2}</p>
                      )}
                      {selectedRecommendation.copywriting.bullets && selectedRecommendation.copywriting.bullets.length > 0 && (
                        <div className="text-sm mt-1">
                          <strong className="block text-xs text-muted-foreground mb-0.5">Bullets:</strong>
                          <ul className="list-disc list-inside pl-2 space-y-0.5">
                            {selectedRecommendation.copywriting.bullets.map((bullet, idx) => (
                              <li key={idx}>{bullet}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      {selectedRecommendation.copywriting.cta && (
                        <p className="text-sm mt-2"><strong>CTA:</strong> <Badge variant="outline">{selectedRecommendation.copywriting.cta}</Badge></p>
                      )}
                    </div>
                  )}
                </section>
              )}

            </div>
          </ScrollArea>
        </DialogContent>
      )}
       <DialogFooter className="mt-4">
        <DialogClose asChild>
          <Button type="button" variant="secondary">
            Close
          </Button>
        </DialogClose>
      </DialogFooter>
    </Dialog>
  )
}
